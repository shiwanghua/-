{"title":"KMP 算法","date":"2019-12-19T14:05:25.000Z","date_formatted":{"ll":"Dec 19, 2019","L":"12/19/2019","MM-DD":"12-19"},"link":"2019/12/19/KMP-算法","updated":"2019-12-20T12:06:30.318Z","content":"<ul>\n<li>后缀子串：字符串 s 的后缀子串，是指最后一个字符与 s 对齐的子串，不包括 s 本身。比如 abc 的后缀子串包括 c，bc，不包括 abc 本身。</li>\n<li>前缀子串：字符串 s 的前缀子串，是指起始字符跟 s 对齐的子串，不包含 s 本身。比如 abc 的前缀子串包括 a，ab，不包括 abc 本身。</li>\n<li>最长相等前后缀：字符串 s 的最长相等前后缀是指，s 的相等的前缀子串和后缀子串中长度最长的那一个。</li>\n<li>最长可匹配后缀子串（最长可匹配后缀）：最长相等前后缀对应的那个后缀子串。</li>\n<li>最长可匹配前缀子串（最长可匹配前缀）：最长相等前后缀对应的那个前缀子串。<blockquote>\n<p>以字符串 ababa 为例<br>其前缀子串为：a、ab、aba、abab<br>其后缀子串为：a、ba、aba、baba<br>最长相等前后缀为 aba ，长度为 3。<br>最长可匹配前缀子串为 aba。<br>最长可匹配后缀子串为 aba。<br>明显最长可匹配前缀子串和最长可匹配后缀子串两者是相同的，前者是前缀，后者是后缀。<br>字符串 s 的最长相等前后缀即，字符串 s 的后缀子串中，与 s 的某个前缀子串相同且长度最长的那个。同理，s 的最长相等前后缀也即，字符串 s 的前缀子串中，与 s 的某个后缀子串相同且长度最长的那个。</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>KMP 算法中，模式串从左向右与文本串进行匹配。类比于 BM 算法的说法，模式串从前向后与文本串进行匹配。</li>\n<li>KMP 算法就是在试图寻找一种规律：在模式串和主串的匹配过程中，当遇到不匹配的字符后，如何利用模式串中已经与文本串匹配的那部分字符串（即模式串中位于不匹配字符的左边的字符串），将模式串一次性滑动很多位？</li>\n<li>坏字符：在模式串与文本串匹配的过程中，把不能匹配的那个字符称为坏字符，坏字符是文本串中的字符。<br>好前缀：在模式串与文本串匹配的过程中，将失配字符左边的模式串中已经匹配的那段字符串称为好前缀。</li>\n<li>当模式串与文本串失配时，假设坏字符对应的模式串字符在模式串中的下标为 j。在好前缀中，查找好前缀的最长相等前后缀，设为{v}，长度为 k，此时将模式串向后滑动 j-k 位。<br>即 j=j-(j-k) → j=k，将 j 更新为 k </li>\n<li>如何求解好前缀的最长相等前后缀？我们发现这个问题不涉及文本串，只与模式串有关，因为好前缀一定是模式串的前缀。因此可以事先预处理模式串，在模式串与文本串的匹配过程中，直接使用预处理的结果。通过5可知，我们希望得到好前缀的最长相等前后缀。并且，模式串的每个前缀都可能是好前缀。当模式串本身就是好前缀时，表示模式串与文本串匹配成功。因此，我们希望通过预处理得到模式串的每个前缀的最长相等前后缀的长度，设为 len（对应 7 中的定义一）。或者得到模式串的每个前缀子串的最长可匹配前缀子串的结尾字符的下标，设为 index（对应 7 中的定义二）。明显，len=index+1。</li>\n<li>定义 next 数组。设模式串为 m。<br>next 数组定义一：next 数组的下标 i 表示模式串的前缀 m[0,i]。下标对应的数组值 next[i] 表示前缀 m[0,i] 的最长可匹配前后缀的长度。<blockquote>\n<p>以 m=ababacd 为例。<br>next[0]=0;<br>next[1]=0;<br>next[2]=1;<br>next[3]=2;<br>next[4]=3;<br>next[5]=0;<br>next 数组定义二：next 数组的下标 i 表示模式串的前缀 m[0,i]。下标对应的数组值 next[i]   表示前缀 m[0,i] 的最长可匹配前缀的结尾字符的下标。<br>以 m=ababacd 为例。<br>next[0]=-1;<br>next[1]=-1;<br>next[2]=0;<br>next[3]=1;<br>next[4]=2;<br>next[5]=-1;<br>明显，正如 5 中所说，定义一的 next 数组的值比定义二的 next 数组中对应的值大一。并且，next[5] 是没有用的，因为这时文本串与模式串已经完全匹配。</p>\n</blockquote>\n</li>\n<li>求解 next 数组<br>由于定义一的 next 数组与定义二的 next 数组没有本质区别，下文只求解定义二的 next 数组<br>首先，next 数组的长度与模式串的长度相同。计算时按照下标从小到大依次计算 next 数组的值。利用动态规划的思想，当计算 next[i] 时，要利用前面计算出的 next[0]，next[1]，… next[i-1]。next[0]=-1 是明显成立的。计算 next 数组时下标从 1 开始。<br>计算 next[i] 时分为两种情况。假设 next[i-1]=k，即子串 m[0,i-1] 的最长可匹配前缀为 m[0,k]<ol>\n<li>如果 m[i]==m[k+1]，说明子串 m[0,i] 的最长可匹配前缀为 m[0,k+1]。此时，令 next[i]=k+1 即可。</li>\n<li>如果 m[i]!=m[k+1]，说明子串 m[0,i] 的最长可匹配前缀不是 m[0,k+1]。此时，应寻找前缀 m[0,i-1] 的次长可匹配前缀，即令 k=next[k]，直到 k=-1 或 m[i]=m[k+1] 为止。<br> 2.1. 若 k=-1，则令 next[i]=-1<br> 2.2. 若 m[i]=m[k+1]，则令 next[i]=k+1</li>\n</ol>\n</li>\n<li>上述计算 next 数组的过程中，最令人费解的步骤莫过于 <code>k=next[k]</code>。下面重点解释该步骤的原理，最好自己画个图。<br>触发该步骤的条件为 m[i]!=m[k+1]，表示 m[0,i-1] 的最长可匹配前缀子串的下一个字符不等于 m[i]。现在，我们考察 m[0,i-1] 的次长可匹配前缀子串 m[0,x]（x 为未知量） 的下一个字符是否等于 m[i]。如果等于，则 m[0,x+1] 就是 m[0,i] 的最长可匹配后缀子串。<br>问题转换为如何求得 m[0,i-1] 的次长可匹配前缀子串。现已知 m[0,i-1] 的最长可匹配前缀子串为 m[0,k]，而次长可匹配前缀子串一定包含在最长可匹配前缀子串中。所以 m[0,i-1] 的次长可匹配前缀子串就是前缀 m[0,k] 的最长可匹配前缀子串！而 m[0,k] 的最长可匹配前缀子串是 m[0,next[k]]，即令 k=next[k]!</li>\n<li>KMP 算法结束，代码如下<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">求解定义二的 Next 数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// 简化版</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getNext</span><span class=\"params\">(<span class=\"keyword\">int</span> *Next, <span class=\"built_in\">string</span> P)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  Next[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;                        <span class=\"comment\">// 明显恒成立</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; P.length(); i++) <span class=\"comment\">// 求解 Next[1]~Next[P.length-1]</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = Next[i - <span class=\"number\">1</span>];  <span class=\"comment\">// P[0,k] 是 P[0,i-1] 的最长可匹配前缀</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (P[k + <span class=\"number\">1</span>] == P[i]) <span class=\"comment\">// P[k+1]=P[i]，这种情况下最简单，说明 P[0,i] 的最长可匹配前缀为 P[0,k+1]</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      Next[i] = k + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\">// P[k+1]!=P[i]，说明 P[0,i] 的最长可匹配前缀不是 P[0,k+1]，此时寻找 P[0,i-1] 的次长可匹配前缀</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k != <span class=\"number\">-1</span> &amp;&amp; P[i] != P[k + <span class=\"number\">1</span>])</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        k = Next[k]; <span class=\"comment\">// 不断寻找 P[0,i-1] 的次长可匹配前缀</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (P[i] == P[k + <span class=\"number\">1</span>])</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        Next[i] = k + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k == <span class=\"number\">-1</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        Next[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 精华版</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getNext2_2</span><span class=\"params\">(<span class=\"keyword\">int</span> *Next, <span class=\"built_in\">string</span> P)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> j = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  Next[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>; <span class=\"comment\">// 初始化 Next 数组</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; P.length(); i++)</span><br><span class=\"line\">  &#123; <span class=\"comment\">// 求解 Next[1]~Next[P.length()-1]</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j != <span class=\"number\">-1</span> &amp;&amp; P[i] != P[j + <span class=\"number\">1</span>])</span><br><span class=\"line\">    &#123;              <span class=\"comment\">// 试图用 P[j+1] 匹配 P[i]</span></span><br><span class=\"line\">      j = Next[j]; <span class=\"comment\">// 不断后退，直到 j==-1 或 P[i]==P[j+1]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (P[i] == P[j + <span class=\"number\">1</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      j++; <span class=\"comment\">// 先令 j 指向这个新匹配的位置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Next[i] = j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// KMP 算法，使用定义二的 next 数组，判断 P 是否是 T 的子串</span></span><br><span class=\"line\"><span class=\"comment\">// 若是，则返回 P 首次在 T 中出现的位置；否则，返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">KMP</span><span class=\"params\">(<span class=\"built_in\">string</span> T, <span class=\"built_in\">string</span> P)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> tLen = T.length(); <span class=\"comment\">// 文本串的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> pLen = P.length(); <span class=\"comment\">// 模式串的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> *Next = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[pLen];</span><br><span class=\"line\">  getNext(Next, P); <span class=\"comment\">// 计算模式串的 Next 数组</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;        <span class=\"comment\">// 初始化 j=0 表示从模式串的左边第一个字符开始匹配</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tLen; i++)</span><br><span class=\"line\">  &#123; <span class=\"comment\">// 试图用 P[j] 匹配 T[i]</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; T[i] != P[j])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      j = Next[j] + <span class=\"number\">1</span>; <span class=\"comment\">// 不断回退，直到 j==0 或者 T[i]==P[j]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T[i] == P[j])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      j++; <span class=\"comment\">// T[i] 与 P[j] 匹配成功，令 j+1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j == pLen)</span><br><span class=\"line\">    &#123;                      <span class=\"comment\">// P 完全匹配，说明 P 是 T 的子串</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> i + <span class=\"number\">1</span> - pLen; <span class=\"comment\">// 返回首次出现时的位置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// 执行完 T 都没匹配成功，匹配失败，返回 -1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure></li>\n</ol>\n","next":{"title":"C++ vector 用法","link":"2019/12/08/C-vector-用法"},"plink":"http://hespoon.github.io/2019/12/19/KMP-算法/"}